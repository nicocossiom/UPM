# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'qtguiui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import io
from typing import List

import folium
from PyQt5 import QtCore, QtGui, QtWidgets, QtWebEngineWidgets
from PyQt5.QtWebEngineWidgets import QWebEngineView
import sys
from main import Station, StationManager


class webMap:
    pathColors = {1: "#ec2323", 2: "#00609c", 3: "#6EA925"}
    iconColors = {1: "red", 2: "darkblue", 3: "green"}

    def __init__(self):
        StationManager.create()
        self.map = folium.Map(location=[50.4605149799455, 30.54050580218687], zoom_start=10, control_scale=True)
        # save map data to data object
        self.data = io.BytesIO()
        self.webView = QWebEngineView()
        # Hide the scroll bar
        self.webView.page().settings().setAttribute(QtWebEngineWidgets.QWebEngineSettings.ShowScrollBars, False)
        self.reset()

    def load(self):
        '''Reloads the map object (folium.Map) into the webMap cached structure and displays it in the window'''
        self.map.save(self.data, close_file=False)
        self.webView.setHtml(self.data.getvalue().decode())

    def reset(self):
        self.setState(StationManager.stations)

    def setState(self, stations: List[Station]) -> None:
        '''Given a list of stations it puts them in the map and unites the ones in the same line'''
        linePath = {1: [], 2: [], 3: []}  # list of [lat, long] per station for each line -> for polyline
        for st in stations:
            line = st.number // 100
            linePath[line].append([st.lat, st.long])
            numberInLine = st.number % 100
            # Creating markers for each of the stations in the path with it's color and preview/popup
            # folium.Marker(location=[st.lat, st.long]).add_to(self.map)
            folium.Marker(location=[st.lat, st.long],
                          popup=f"<p>Station: <strong>{st.name}</strong>\nLine: <strong>{line}</strong>\nStation Number:<strong>{numberInLine}</strong></p>",
                          tooltip=f"L{line}-{numberInLine}.{st.name}",
                          icon=folium.Icon(color=webMap.iconColors[line])).add_to(self.map)

        # Creating a line Outline for the path, each line with it's color
        for lineList in linePath.items():
            folium.PolyLine(lineList[1], color=webMap.pathColors[lineList[0]], weight=2.5, opacity=1).add_to(self.map)
        self.load()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        ##fonts
        f12U = QtGui.QFont()
        f12U.setPointSize(12)
        f12U.setUnderline(True)
        f9 = QtGui.QFont()
        f9.setPointSize(9)
        f9.setKerning(True)
        f14U = QtGui.QFont()
        f14U.setPointSize(14)
        f14U.setUnderline(True)

        MainWindow.resize(1210, 773)
        MainWindow.setMinimumSize(QtCore.QSize(800, 600))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        #####LEFTPANE####
        self.leftPaneWidget = QtWidgets.QWidget(self.centralwidget)
        # Mantener la ventana fija a 1/3
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHeightForWidth(self.leftPaneWidget.sizePolicy().hasHeightForWidth())
        self.leftPaneWidget.setSizePolicy(sizePolicy)
        self.leftPaneWidget.setMinimumSize(QtCore.QSize(350, 0))
        self.verticalLayout = QtWidgets.QVBoxLayout(self.leftPaneWidget)
        # Choose Path Widget Label
        self.stChooserLB = QtWidgets.QLabel(self.leftPaneWidget)
        self.stChooserLB.setFont(f14U)
        self.verticalLayout.addWidget(self.stChooserLB)

        self.groupBox_2 = QtWidgets.QGroupBox(self.leftPaneWidget)
        self.groupBox_2.setMinimumSize(QtCore.QSize(0, 200))
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox_2)

        # Origin Label
        self.origLB = QtWidgets.QLabel(self.groupBox_2)
        self.origLB.setFont(f12U)
        self.origLB.setScaledContents(False)
        self.verticalLayout_2.addWidget(self.origLB)
        # Origin combo box
        self.origCB = QtWidgets.QComboBox(self.groupBox_2)
        self.origCB.setMinimumSize(QtCore.QSize(0, 25))

        self.origCB.setEditable(False)

        self.origCB.setDuplicatesEnabled(False)
        self.verticalLayout_2.addWidget(self.origCB)
        # Destination Label
        self.destinationLB = QtWidgets.QLabel(self.groupBox_2)
        self.destinationLB.setFont(f12U)
        self.verticalLayout_2.addWidget(self.destinationLB)
        # Origin combo box
        self.destCB = QtWidgets.QComboBox(self.groupBox_2)
        self.destCB.setMinimumSize(QtCore.QSize(0, 25))
        self.destCB.setFont(f9)
        self.verticalLayout_2.addWidget(self.destCB)
        # self.destCB.addItems([x.name for x in StationManager.stations

        self.pushButton = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        self.pushButton.setMinimumSize(QtCore.QSize(129, 25))
        self.pushButton.setMaximumSize(QtCore.QSize(175, 16777215))
        self.pushButton.setFont(f9)
        self.verticalLayout_2.addWidget(self.pushButton, 0, QtCore.Qt.AlignHCenter)
        self.verticalLayout.addWidget(self.groupBox_2)
        self.stListLB = QtWidgets.QLabel(self.leftPaneWidget)

        self.stListLB.setFont(f14U)
        self.verticalLayout.addWidget(self.stListLB)
        self.pathList = QtWidgets.QListView(self.leftPaneWidget)
        self.pathList.setProperty("isWrapping", True)
        self.pathList.setResizeMode(QtWidgets.QListView.Adjust)
        self.pathList.setWordWrap(True)
        self.verticalLayout.addWidget(self.pathList)
        self.horizontalLayout.addWidget(self.leftPaneWidget)
        self.mapWidget = QtWidgets.QWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mapWidget.sizePolicy().hasHeightForWidth())
        self.mapWidget.setSizePolicy(sizePolicy)

        #Cargar mapa
        mapa = webMap()
        mapa.load()
        self.horizontalLayout.addWidget(mapa.webView)
        # Cargar las estaciones en los dropdown menus
        self.loadCBs()

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1210, 21))
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        MainWindow.setMenuBar(self.menubar)
        self.actionHelp = QtWidgets.QAction(MainWindow)
        self.menuFile.addAction(self.actionHelp)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Kiev-Metro Finder"))
        MainWindow.setWindowIcon(QtGui.QIcon("lib/icono.ico"))
        self.stChooserLB.setText(_translate("MainWindow", "Station chooser:"))
        self.origLB.setText(_translate("MainWindow", "Select starting station:"))
        self.destinationLB.setText(_translate("MainWindow", "Select destination station:"))
        self.pushButton.setText(_translate("MainWindow", "Find Optimal Path"))
        self.stListLB.setText(_translate("MainWindow", "List of stations in path "))
        self.menuFile.setTitle(_translate("MainWindow", "File "))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.actionHelp.setText(_translate("MainWindow", "Help"))

    def loadCBs(self):
        sitios = []
        self.destCB.addItem("--Click and choose from drop-down menu--")
        self.origCB.addItem("--Click and choose from drop-down menu--")
        for station in StationManager.stations:
            sitios.append(f"L{station.number // 100} - {station.number % 100} -> {station.name}")
        print(sitios)
        self.origCB.addItems(sitios)
        self.destCB.addItems(sitios)


if __name__ == "gui":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)

    MainWindow.show()
    sys.exit(app.exec_())
