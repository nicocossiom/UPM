# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'qtguiui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import io
import sys
from typing import List

import folium
from PyQt5 import QtCore, QtGui, QtWebEngineWidgets, QtWidgets
from PyQt5.QtWebEngineWidgets import QWebEngineView

from athens_metro import Station, StationManager


class WebMap:
    path_colors = {1: "#6EA925", 2: "#ec2323", 3: "#00609c"}
    icon_colors = {1: "green", 2: "red", 3: "darkblue"}
    starting_coords = [37.98088333930677, 23.753256686527504]
    StationManager.create()

    def __init__(self, stations):
        self.markers = []
        self.lines = []
        self.map = folium.Map(
            location=WebMap.starting_coords, zoom_start=11, control_scale=True)
        # save map data to data object
        self.data = io.BytesIO()
        self.web_view = QWebEngineView()
        # Hide the scroll bar
        self.web_view.page().settings().setAttribute(
            QtWebEngineWidgets.QWebEngineSettings.ShowScrollBars, False)
        self.set_state(stations)

    def load(self):
        '''Reloads the map object (folium.Map) into the webMap cached structure and displays it in the window'''
        self.map.save(self.data, close_file=False)
        self.web_view.setHtml(self.data.getvalue().decode())

    def set_state(self, stations: List[Station]) -> None:
        '''Given a list of stations it puts them in the map and unites the ones in the same line'''
        # self.map = folium.Map(
        #     location=WebMap.starting_coords, zoom_start=11, control_scale=True)
        # list of [lat, long] per station for each line -> for polyline
        line_path = {1: [], 2: [], 3: []}
        for station in stations:
            line = int(station.number) // 100
            line_path[line].append([station.lat, station.long])
            numner_in_line = int(station.number) % 100
            # Creating markers for each of the stations in the path with it's color and preview/popup
            # folium.Marker(location=[st.lat, st.long]).add_to(self.map)
            self.markers.append(
                folium.Marker(
                    location=[station.lat, station.long],
                    popup=f"<p>Station: <strong>{station.name}</strong>\nLine: <strong>{line}</strong>\nStation Number:<strong>{numner_in_line}</strong></p>",
                    tooltip=f"{station.number}: {station.name}",
                    icon=folium.Icon(color=WebMap.icon_colors[line])
                )
                .add_to(self.map))

        # Creating a line Outline for the path, each line with it's color
        for line_list in line_path.items():
            if line_path[line_list[0]]:
                self.lines.append(folium.PolyLine(
                    line_list[1], color=WebMap.path_colors[line_list[0]], weight=2.5, opacity=1).add_to(self.map))
        self.load()


class UIMainWindow(object):
    """
    Main window setup class for the GUI.
    Parameters
    ----------
    object : _type_
        _description_
    """

    def __init__(self, main_window):
        # fonts
        font_12pt_underlined = QtGui.QFont()
        font_12pt = QtGui.QFont()
        font_12pt_underlined.setPointSize(12)
        font_12pt_underlined.setUnderline(True)
        font_9pt = QtGui.QFont()
        font_9pt.setPointSize(9)
        font_9pt.setKerning(True)
        font_14pt_underlined = QtGui.QFont()
        font_14pt_underlined.setPointSize(14)
        font_14pt_underlined.setUnderline(True)

        main_window.resize(1210, 773)
        main_window.setMinimumSize(QtCore.QSize(800, 600))
        self.central_widget = QtWidgets.QWidget(main_window)
        self.horizontal_layout = QtWidgets.QHBoxLayout(self.central_widget)
        ##### LEFTPANE####
        self.left_pane_widget = QtWidgets.QWidget(self.central_widget)
        # Mantener la ventana fija a 1/3
        size_policy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        size_policy.setHeightForWidth(
            self.left_pane_widget.sizePolicy().hasHeightForWidth())
        self.left_pane_widget.setSizePolicy(size_policy)
        self.left_pane_widget.setMinimumSize(QtCore.QSize(350, 0))
        self.vertical_layout = QtWidgets.QVBoxLayout(self.left_pane_widget)
        # Choose Path Widget Label
        self.station_chooser_label = QtWidgets.QLabel(self.left_pane_widget)
        self.station_chooser_label.setFont(font_14pt_underlined)
        self.vertical_layout.addWidget(self.station_chooser_label)

        self.group_box_2 = QtWidgets.QGroupBox(self.left_pane_widget)
        self.group_box_2.setMinimumSize(QtCore.QSize(0, 200))
        self.vertical_layout_2 = QtWidgets.QVBoxLayout(self.group_box_2)

        # Origin Label
        self.origin_label = QtWidgets.QLabel(self.group_box_2)
        self.origin_label.setFont(font_12pt_underlined)
        self.origin_label.setScaledContents(False)
        self.vertical_layout_2.addWidget(self.origin_label)
        # Origin combo box
        self.origin_combo_box = QtWidgets.QComboBox(self.group_box_2)
        self.origin_combo_box.setMinimumSize(QtCore.QSize(0, 25))

        self.origin_combo_box.setEditable(False)

        self.origin_combo_box.setDuplicatesEnabled(False)
        self.vertical_layout_2.addWidget(self.origin_combo_box)
        # Destination Label
        self.destination_label = QtWidgets.QLabel(self.group_box_2)
        self.destination_label.setFont(font_12pt_underlined)
        self.vertical_layout_2.addWidget(self.destination_label)
        # Origin combo box
        self.destination_comb_box = QtWidgets.QComboBox(self.group_box_2)
        self.destination_comb_box.setMinimumSize(QtCore.QSize(0, 25))
        self.destination_comb_box.setFont(font_12pt)
        self.vertical_layout_2.addWidget(self.destination_comb_box)
        self.find_path_button = QtWidgets.QPushButton(self.group_box_2)
        self.find_path_button.setEnabled(True)
        size_policy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(
            self.find_path_button.sizePolicy().hasHeightForWidth())
        self.find_path_button.setSizePolicy(size_policy)
        self.find_path_button.setMinimumSize(QtCore.QSize(129, 25))
        self.find_path_button.setMaximumSize(QtCore.QSize(175, 16777215))
        self.find_path_button.setFont(font_12pt)
        self.vertical_layout_2.addWidget(
            self.find_path_button, 0, QtCore.Qt.AlignHCenter)
        self.vertical_layout.addWidget(self.group_box_2)
        self.station_list_label = QtWidgets.QLabel(self.left_pane_widget)
        self.find_path_button.clicked.connect(self.find_path)
        self.station_list_label.setFont(font_14pt_underlined)
        self.vertical_layout.addWidget(self.station_list_label)
        self.path_list = QtWidgets.QListView(self.left_pane_widget)
        self.path_list.setProperty("isWrapping", True)
        self.path_list.setResizeMode(QtWidgets.QListView.Adjust)
        self.path_list.setWordWrap(True)
        self.model = QtGui.QStandardItemModel()
        self.path_list.setModel(self.model)
        self.vertical_layout.addWidget(self.path_list)
        self.horizontal_layout.addWidget(self.left_pane_widget)
        self.map_widget = QtWidgets.QWidget(self.central_widget)
        size_policy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(
            self.map_widget.sizePolicy().hasHeightForWidth())
        self.map_widget.setSizePolicy(size_policy)

        # Cargar mapa
        self.map = WebMap(StationManager.stations)
        self.map.load()
        self.horizontal_layout.addWidget(self.map.web_view)
        # Cargar las estaciones en los dropdown menus
        self.load_combo_boxes()

        # Reset map button
        self.reset_map_button = QtWidgets.QPushButton(self.group_box_2)
        self.reset_map_button.setEnabled(True)
        self.reset_map_button.setFont(font_12pt)
        self.reset_map_button.setText("Reset")
        self.reset_map_button.clicked.connect(self.relaod_map)
        self.vertical_layout_2.addWidget(
            self.reset_map_button, 0, QtCore.Qt.AlignHCenter)

        main_window.setCentralWidget(self.central_widget)
        self.menubar = QtWidgets.QMenuBar(main_window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1210, 21))
        self.menu_file = QtWidgets.QMenu(self.menubar)
        self.menu_edit = QtWidgets.QMenu(self.menubar)
        main_window.setMenuBar(self.menubar)
        self.action_help = QtWidgets.QAction(main_window)
        self.menu_file.addAction(self.action_help)
        self.menubar.addAction(self.menu_file.menuAction())
        self.menubar.addAction(self.menu_edit.menuAction())

        self.retranslate_ui(main_window)
        QtCore.QMetaObject.connectSlotsByName(main_window)

    def relaod_map(self):
        """
        Removes the old map widget from the layout, creating a new map widget, adding the new map widget to the layout,
        and clearing the model. This is used to reset the map.
        """
        self.horizontal_layout.removeWidget(self.map.web_view)
        self.map = WebMap(StationManager.stations)
        self.map.load()
        self.horizontal_layout.addWidget(self.map.web_view)
        self.model.clear()
        self.origin_combo_box.setCurrentIndex(0)
        self.destination_comb_box.setCurrentIndex(0)

    def find_path(self):
        """
        It takes the origin and destination stations, finds the optimal path between them, and then displays the path on the map
        and in the list view.
        """
        self.model.clear()
        for node in StationManager.stations:
            node.predecessor = node
            node.realCost = 0.0
            node.estimatedCost = 0.0
        orig = str(self.origin_combo_box.currentText())
        dest = str(self.destination_comb_box.currentText())
        ornum = orig.split()[0]
        desnum = dest.split()[0]

        if (ornum != "--Click") and (desnum != "--Click"):

            origin_station = StationManager.statmap[int(ornum)]
            destination_station = StationManager.statmap[int(desnum)]
            (path, optimal_path_distance) = origin_station.optimal_path(
                destination_station)

            self.horizontal_layout.removeWidget(self.map.web_view)

            self.map = WebMap(path)
            self.map.load()
            self.horizontal_layout.addWidget(self.map.web_view)

            curline = path[0].number // 100
            self.model.appendRow(QtGui.QStandardItem(
                f"Total distance: {str(round(optimal_path_distance/1000, 2))} km"))
            for station in path:
                if station.number // 100 != curline:
                    curline = station.number // 100
                    self.model.appendRow(QtGui.QStandardItem(
                        f"-- CHANGE TO LINE {str(curline)} --"))
                self.model.appendRow(QtGui.QStandardItem(station.name))

    def retranslate_ui(self, main_window):
        """
        Translates the text of the GUI to the language of the user's choice.

        :param main_window: The window to translate against
        """
        _translate = QtCore.QCoreApplication.translate
        main_window.setWindowTitle(_translate(
            "main_window", "Athens-Metro Finder"))
        main_window.setWindowIcon(QtGui.QIcon("./lib/metro.ico"))
        self.station_chooser_label.setText(
            _translate("main_window", "Station chooser:"))
        self.origin_label.setText(_translate(
            "main_window", "Select starting station:"))
        self.destination_label.setText(_translate(
            "main_window", "Select destination station:"))
        self.find_path_button.setText(_translate(
            "main_window", "Find Optimal Path"))
        self.station_list_label.setText(_translate(
            "main_window", "List of stations in path "))
        self.menu_file.setTitle(_translate("main_window", "File "))
        self.menu_edit.setTitle(_translate("main_window", "Edit"))
        self.action_help.setText(_translate("main_window", "Help"))

    def load_combo_boxes(self):
        """
        _summary_

        _extended_summary_
        """
        sitios = []
        self.destination_comb_box.addItem(
            "--Click and choose from drop-down menu--")
        self.origin_combo_box.addItem(
            "--Click and choose from drop-down menu--")
        for station in StationManager.stations:
            sitios.append(f"{station.number} - {station.name}")
        # print(sitios)
        self.origin_combo_box.addItems(sitios)
        self.destination_comb_box.addItems(sitios)


def start():
    """
    _summary_

    _extended_summary_
    """
    app = QtWidgets.QApplication(sys.argv)
    main_window = QtWidgets.QMainWindow()
    ui = UIMainWindow(main_window=main_window)
    main_window.show()
    main_window.raise_()
    sys.exit(app.exec_())
